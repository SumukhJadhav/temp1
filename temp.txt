import os
import re
from concurrent.futures import ThreadPoolExecutor, as_completed

def search_in_file(file_path, regex):
    matches = []
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            for line_num, line in enumerate(f, start=1):
                if regex.search(line):
                    matches.append((file_path, line_num, line.strip()))
    except (IOError, OSError) as e:
        print(f"Could not open file {file_path}: {e}")
    return matches

def search_pattern_in_files(root_directory, pattern, num_threads=4):
    # Compile regex pattern for faster matching
    regex = re.compile(pattern)
    all_matches = []
    
    # Gather all file paths
    file_paths = [
        os.path.join(subdir, file)
        for subdir, _, files in os.walk(root_directory)
        for file in files
    ]
    
    # Use ThreadPoolExecutor to handle multiple files concurrently
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        future_to_file = {executor.submit(search_in_file, file_path, regex): file_path for file_path in file_paths}
        
        for future in as_completed(future_to_file):
            matches = future.result()
            all_matches.extend(matches)
            for match in matches:
                print(f"Match found in {match[0]} on line {match[1]}: {match[2]}")
    
    return all_matches

# Example usage
search_pattern_in_files('/path/to/root/directory', r'your_pattern', num_threads=8)






***********



import os
import re

def search_pattern_in_files(root_directory, pattern):
    # Compile the pattern for faster matching
    regex = re.compile(pattern)
    
    # Traverse all subdirectories
    for subdir, _, files in os.walk(root_directory):
        for file in files:
            file_path = os.path.join(subdir, file)
            
            # Open each file and search for the pattern
            try:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    for line_num, line in enumerate(f, start=1):
                        if regex.search(line):
                            print(f"Match found in {file_path} on line {line_num}: {line.strip()}")
            except (IOError, OSError) as e:
                print(f"Could not open file {file_path}: {e}")

# Example usage
search_pattern_in_files('/path/to/root/directory', r'your_pattern')
